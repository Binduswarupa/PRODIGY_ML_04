import os
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split

# Dataset path
data_dir = os.path.expanduser('~/Desktop/leapGestRecog/')

# Parameters
img_size = (64, 64)  # Resize all images to 64x64
classes = sorted(os.listdir(data_dir))  # List of gesture classes
data = []
labels = []

# Load images and labels
for label, class_dir in enumerate(classes):
    class_path = os.path.join(data_dir, class_dir)
    if os.path.isdir(class_path):
        for root, _, files in os.walk(class_path):  # Traverse subdirectories
            for file in files:
                file_path = os.path.join(root, file)
                if file.lower().endswith(('png', 'jpg', 'jpeg')):  # Check for image files
                    try:
                        # Load and preprocess the image
                        img = load_img(file_path, target_size=img_size)
                        img_array = img_to_array(img) / 255.0  # Normalize pixel values
                        data.append(img_array)
                        labels.append(label)
                    except Exception as e:
                        print(f"Error loading image: {file_path}. Error: {e}")

# Convert to numpy arrays
data = np.array(data)
labels = np.array(labels)

# Encode labels as categorical
labels = to_categorical(labels, num_classes=len(classes))

# Split into training and testing datasets
if len(data) > 0:
    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
    print(f"Training data shape: {X_train.shape}")
    print(f"Testing data shape: {X_test.shape}")
else:
    print("No data loaded. Check the dataset structure.")

rom tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(classes), activation='softmax')  # Output layer
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Show the model summary
model.summary()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)
datagen.fit(X_train)

# Train the model
history = model.fit(
    datagen.flow(X_train, y_train, batch_size=32),
    validation_data=(X_test, y_test),
    epochs=20,
    verbose=1
)
# Evaluate on test data
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

model.save('hand_gesture_model.h5')
print("Model saved as 'hand_gesture_model.h5'")

import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()
